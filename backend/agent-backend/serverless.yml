# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: yuewang
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: agent
# "service" is the name of this project. This will also be added to your AWS resource names.
service: agent-backend

stages:
  prod:
    observability: true
  test:
    observability: true
  default:
    observability: false
    params:
      agentUserPoolName: ${self:service}-user-pool-${sls:stage}
      agentUserPoolClientName: ${self:service}-user-pool-client-${sls:stage}
      agentUserPoolDomain: ${self:service}-user-pool-domain-${sls:stage}
      googleClientId: ${param:googleClientId-${sls:stage}, param:defaultGoogleClientId}
      googleClientSecret: ${param:googleClientSecret-${sls:stage}, param:defaultGoogleClientSecret}
      cloudFrontAlternateDomain: ${param:cloudFrontAlternateDomain-${sls:stage}, param:defaultCloudFrontAlternateDomain}
      mainTable: ${sls:stage}_linerra_main
      frontendUrl: ${env:FRONTEND_URL, param:frontendUrl-${sls:stage}, 'http://localhost:8000'}
      localDynamoDBPort: ${env:LOCAL_DYNAMO_DB_PORT, 8900}
      labelBucketName: shipment-label-files-${sls:stage}

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  # timeout: 29
  versionFunctions: false
  # httpApi:
  #   id: Fn::GetAtt: [HttpApi, Arn]
  # httpApi:
  #   cors:
  #     allowedOrigins:
  #       - ${param:frontendUrl}
  #     allowedHeaders:
  #       - "*"
  #     allowedMethods:
  #       - "*"
  environment:
    AGENT_USER_POOL_ID: !Ref AgentUserPool
    AGENT_USER_POOL_CLIENT_ID: !Ref AgentUserPoolClient
    AGENT_USER_POOL_REGION: ${self:provider.region}
    AGENT_USER_POOL_DOMAIN: ${param:agentUserPoolDomain}
    MAIN_TABLE: ${param:mainTable}
    VERYK_APP_ID: ${env:VERYK_APP_ID, param:verykAppId}
    VERYK_APP_SECRET: ${env:VERYK_APP_SECRET, param:verykAppSecret}
    VERYK_API_URL: ${env:VERYK_API_URL, param:verykApiUrl}
    FRONTEND_URL: ${param:frontendUrl}
    LOCAL_DYNAMO_DB_PORT: ${param:localDynamoDBPort}
    S3_LABEL_BUCKET_NAME: ${param:labelBucketName}

  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'cognito-idp:AdminCreateUser'
            - 'cognito-idp:AdminDeleteUser'
            - 'cognito-idp:AdminGetUser'
            - 'cognito-idp:AdminUpdateUserAttributes'
            - 'cognito-idp:ListUsers'
            - 'cognito-idp:AdminInitiateAuth'
            - 'cognito-idp:AdminRespondToAuthChallenge'
            - 'cognito-idp:AdminSetUserPassword'
            - 'cognito-idp:SignUp'
            - 'cognito-idp:ConfirmSignUp'
            - 'cognito-idp:ForgotPassword'
            - 'cognito-idp:ConfirmForgotPassword'
            - 'cognito-idp:ChangePassword'
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:PutObjectAcl
          Resource: "*"

functions:
  api: ${file(./apiFuncConfig.js)}
    # handler: src/index.handler
    # timeout: 300
    # url:
    #   cors:  # CORS configuration for Lambda URL, can also be defined as `true` with default CORS configuration
    #     allowedOrigins:
    #       - ${param:frontendUrl}
    #     allowedHeaders:
    #       - "*"
    #     allowedMethods:
    #       - "*"
    # events:
    #   - httpApi: "*"

resources:
  Conditions:
    ShouldCreateCustomDomain:
      Fn::Not:
        - Fn::Equals:
            - ${param:apiGatewayDomain-${sls:stage}, ''}
            - ''

  Resources:

    # HttpApiMapping:
    #   Type: AWS::ApiGatewayV2::ApiMapping
    #   Condition: ShouldCreateCustomDomain
    #   DependsOn: HttpApiCustomDomain
    #   Properties:
    #     ApiId: !Ref HttpApi
    #     DomainName: ${param:apiGatewayDomain-${sls:stage}, ''}
    #     Stage: !Ref HttpApiStage

    # HttpApiCustomDomain:
    #   Type: AWS::ApiGatewayV2::DomainName
    #   Condition: ShouldCreateCustomDomain
    #   Properties:
    #     DomainName: ${param:apiGatewayDomain-${sls:stage}, ''}
    #     DomainNameConfigurations:
    #       - CertificateArn: ${param:apiGatewayCertificateArn-${sls:stage}, ''}
    #         EndpointType: REGIONAL
    #         SecurityPolicy: TLS_1_2

    ApiCloudFrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: ${self:service}-${sls:stage}-api-cloudfront-origin-access-control
          OriginAccessControlOriginType: lambda
          SigningBehavior: always
          SigningProtocol: sigv4

    ApiCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${param:cloudFrontAlternateDomain}
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            CachedMethods:
              - HEAD
              - GET
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
            Compress: true
            #SmoothStreaming: false
            TargetOriginId: !Select [2, !Split ["/", !GetAtt ApiLambdaFunctionUrl.FunctionUrl]] 
            ViewerProtocolPolicy: redirect-to-https
          Enabled: true
          HttpVersion: http2
          #IPV6Enabled: true
          # Logging:
          #   IncludeCookies: false
          #   Bucket: ''
          #   Prefix: ''
          Origins:
            - DomainName: !Select [2, !Split ["/", !GetAtt ApiLambdaFunctionUrl.FunctionUrl]] 
              Id: !Select [2, !Split ["/", !GetAtt ApiLambdaFunctionUrl.FunctionUrl]] 
              # ConnectionAttempts: 3
              # ConnectionTimeout: 10
              CustomOriginConfig:
                HTTPSPort: 443
                HTTPPort: 80
                OriginProtocolPolicy: https-only
                OriginReadTimeout: 60
                # OriginKeepaliveTimeout: 5
                OriginSSLProtocols:
                  - TLSv1.2
                
                
              OriginAccessControlId: !Ref ApiCloudFrontOriginAccessControl
              #OriginCustomHeaders: []
              
              OriginShield:
                Enabled: false
              #OriginPath: ''
          PriceClass: PriceClass_All
          Staging: false
          ViewerCertificate:
            AcmCertificateArn: ${param:apiGatewayCertificateArn-${sls:stage}, ''}
            #CloudFrontDefaultCertificate: false
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
                

    ApiAllowCloudFrontServicePrincipalLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt ApiLambdaFunction.Arn
        Action: lambda:InvokeFunctionUrl
        Principal: cloudfront.amazonaws.com
        SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${ApiCloudFrontDistribution}'

        # !Ref ApiCloudFrontDistribution


    AgentUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${param:agentUserPoolName}
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
        UserAttributeUpdateSettings:
          AttributesRequireVerificationBeforeUpdate:
            - email
        Schema:
          - AttributeDataType: String
            Name: stationId
            Mutable: true
            #Required: true
            StringAttributeConstraints:
              MinLength: 36
              MaxLength: 36
          - AttributeDataType: String
            Name: stationNo
            Mutable: true
            #Required: true
            StringAttributeConstraints:
              MinLength: 2
              MaxLength: 2

    AgentUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn: AgentUserPoolIdentityProviderGoogle
      Properties:
        ClientName: ${param:agentUserPoolClientName}
        UserPoolId: !Ref AgentUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        PreventUserExistenceErrors: ENABLED
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          #- email
          - openid
          #- profile
          - aws.cognito.signin.user.admin
        CallbackURLs:
          - ${param:frontendUrl}/user/login
        SupportedIdentityProviders:
          - Google
        WriteAttributes:
          - email
          - name
          - phone_number
          - custom:stationId
          - custom:stationNo

    AgentUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${param:agentUserPoolDomain}
        UserPoolId: !Ref AgentUserPool

    AgentUserPoolIdentityProviderGoogle:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId: !Ref AgentUserPool
        ProviderName: Google
        ProviderType: Google
        ProviderDetails:
          client_id: ${param:googleClientId}
          client_secret: ${param:googleClientSecret}
          authorize_scopes: "openid profile email"
        AttributeMapping:
          email: email
          email_verified: email_verified

    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:mainTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
          - AttributeName: GSI2PK
            AttributeType: S
          - AttributeName: GSI2SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GSI2
            KeySchema:
              - AttributeName: GSI2PK
                KeyType: HASH
              - AttributeName: GSI2SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: expirationTime
          Enabled: true

    S3LabelBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${param:labelBucketName}

package:
 individually: true

custom:
  serverless-offline:
    reloadHandler: true
  dynamodb:
    start:
      docker: true
      port: ${param:localDynamoDBPort}
      migrate: true
      noStart: true
      #sharedDb: true

  # addHttpOffline: # Only used for local testing (offline) as Lambda URL is not (yet) supported by Serverless Offline
  #   integrationInternal:
  #     offline:
  #       - httpApi: "*"

plugins:
  - serverless-cloudside-plugin
  - serverless-dynamodb
  - serverless-offline
#  - serverless-dynamodb-client
