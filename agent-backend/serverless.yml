# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: yuewang
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: agent
# "service" is the name of this project. This will also be added to your AWS resource names.
service: agent-backend

stages:
  prod:
    observability: true
  default:
    observability: false

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  timeout: 29
  versionFunctions: false
  environment:
    AGENT_USER_POOL_ID: !Ref AgentUserPool
    AGENT_USER_POOL_CLIENT_ID: !Ref AgentUserPoolClient
    AGENT_USER_POOL_REGION: ${self:provider.region}
    AGENT_USER_POOL_DOMAIN: ${self:service}-user-pool-domain-${sls:stage}
    USER_SESSIONS_TABLE: ${self:service}-user-sessions-${sls:stage}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'cognito-idp:AdminCreateUser'
            - 'cognito-idp:AdminDeleteUser'
            - 'cognito-idp:AdminGetUser'
            - 'cognito-idp:AdminUpdateUserAttributes'
            - 'cognito-idp:ListUsers'
            - 'cognito-idp:AdminInitiateAuth'
            - 'cognito-idp:AdminRespondToAuthChallenge'
            - 'cognito-idp:AdminSetUserPassword'
            - 'cognito-idp:SignUp'
            - 'cognito-idp:ConfirmSignUp'
            - 'cognito-idp:ForgotPassword'
            - 'cognito-idp:ConfirmForgotPassword'
            - 'cognito-idp:ChangePassword'
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
          Resource:
            - Fn::GetAtt: [UserSessionsTable, Arn]

functions:
  api:
    handler: src/index.handler
    events:
      - httpApi: "*"

resources:
  Resources:
    AgentUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${sls:stage}
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
        UserAttributeUpdateSettings:
          AttributesRequireVerificationBeforeUpdate:
            - email

    AgentUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client-${sls:stage}
        UserPoolId: !Ref AgentUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        PreventUserExistenceErrors: ENABLED

    AgentUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:service}-user-pool-domain-${sls:stage}
        UserPoolId: !Ref AgentUserPool

    UserSessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-user-sessions-${sls:stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: sessionId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: sessionId
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: expirationTime
          Enabled: true

package:
  individually: true
